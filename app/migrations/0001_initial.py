# Generated by Django 3.0.5 on 2020-06-03 07:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Events',
            fields=[
                ('receiptid', models.CharField(db_column='ReceiptID', max_length=100, primary_key=True, serialize=False)),
                ('college', models.CharField(max_length=250)),
                ('slot', models.CharField(blank=True, max_length=20, null=True)),
                ('noofmem', models.IntegerField()),
                ('domain', models.CharField(max_length=250)),
                ('city', models.CharField(db_column='City', max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('date', models.CharField(db_column='Date', max_length=30)),
                ('name1', models.CharField(max_length=100)),
                ('gender', models.CharField(db_column='Gender', max_length=20)),
                ('email1', models.CharField(max_length=100)),
                ('phone1', models.BigIntegerField()),
                ('name2', models.CharField(max_length=100)),
                ('gender2', models.CharField(db_column='Gender2', max_length=20)),
                ('email2', models.CharField(max_length=100)),
                ('phone2', models.BigIntegerField()),
                ('name3', models.CharField(max_length=100)),
                ('gender3', models.CharField(db_column='Gender3', max_length=20)),
                ('email3', models.CharField(max_length=100)),
                ('phone3', models.BigIntegerField()),
                ('name4', models.CharField(max_length=100)),
                ('gender4', models.CharField(db_column='Gender4', max_length=20)),
                ('email4', models.CharField(max_length=100)),
                ('phone4', models.BigIntegerField()),
                ('name5', models.CharField(max_length=100)),
                ('gender5', models.CharField(db_column='Gender5', max_length=20)),
                ('email5', models.CharField(max_length=100)),
                ('phone5', models.BigIntegerField()),
                ('name6', models.CharField(max_length=100)),
                ('gender6', models.CharField(db_column='Gender6', max_length=10)),
                ('email6', models.CharField(max_length=100)),
                ('phone6', models.BigIntegerField()),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('points', models.IntegerField(default=0)),
                ('timeRequired', models.FloatField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Machines',
            fields=[
                ('machineId', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('machineTitle', models.CharField(max_length=20, verbose_name='Name')),
                ('machineIp', models.CharField(max_length=20, verbose_name='IP Address')),
                ('machinePoints', models.IntegerField(default=0, verbose_name='Points')),
                ('machineSolvers', models.IntegerField(default=0, verbose_name='Solvers')),
                ('enumeration', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='Enumeration Rating')),
                ('ctf_like', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='CTF-Like Rating')),
                ('custom_exploitation', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='Custom Exploitation Rating')),
                ('real_life', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='Real Life Rating')),
                ('cve', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='CVE Rating')),
                ('easyRating', models.IntegerField(default=0, verbose_name='Easy Raters')),
                ('mediumRating', models.IntegerField(default=0, verbose_name='Medium Raters')),
                ('hardRating', models.IntegerField(default=0, verbose_name='Hard Raters')),
                ('userFlag', models.CharField(default='lakshya_CTF{hack_me_now}', max_length=50)),
                ('rootFlag', models.CharField(default='lakshya_CTF{hack_me_now}', max_length=50)),
            ],
            options={
                'verbose_name': 'Machine',
                'verbose_name_plural': 'Machines',
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('questionDescription', models.TextField(verbose_name='Description')),
                ('questionTitle', models.CharField(default='Lakshya', max_length=40, verbose_name='Title')),
                ('questionPoints', models.IntegerField(default=0, verbose_name='Points')),
                ('questionData', models.FileField(blank=True, upload_to='', verbose_name='Data')),
                ('questionFlag', models.CharField(default='lakshya_CTF{hack_me_now}', max_length=50)),
                ('questionHint', models.TextField(default='Sample Hint', verbose_name='Flag')),
                ('questionSolvers', models.IntegerField(default=0, verbose_name='Solvers')),
                ('questionType', models.CharField(choices=[('web', 'Web'), ('reversing', 'Reversing'), ('steg', 'Steganography'), ('pwning', 'Pwning'), ('crypt', 'Cryptography'), ('misc', 'Miscellaneous')], default='web', max_length=15, verbose_name='Category')),
                ('easyRating', models.IntegerField(default=0, verbose_name='Easy Raters')),
                ('mediumRating', models.IntegerField(default=0, verbose_name='Medium Raters')),
                ('hardRating', models.IntegerField(default=0, verbose_name='Hard Raters')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='TakenQuestionHint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hint', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Questions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SolvedTimestamps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_record', models.DateTimeField(default=django.utils.timezone.now)),
                ('points', models.IntegerField(default=0)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SolvedQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Questions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SolvedMachines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root', models.BooleanField(default=False)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Machines')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
